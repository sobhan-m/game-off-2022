//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Inputs/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""Combat"",
            ""id"": ""5de689d1-8341-4f87-a925-845bded2cf19"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Button"",
                    ""id"": ""864014c4-4030-4133-8ec1-0b3164d2e71f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""1e737127-e53f-41c4-a27e-76586bdbf215"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""2fbcf601-32de-4357-a28c-4bcac2146c3d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Change Weapons"",
                    ""type"": ""Value"",
                    ""id"": ""ceeec63d-4293-46bd-93b3-f094f3bb6b4d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Heal Ability"",
                    ""type"": ""Button"",
                    ""id"": ""590b64ad-a28a-48f8-80e2-b66310fe9b1d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Rage Ability"",
                    ""type"": ""Button"",
                    ""id"": ""0d3baf08-b862-486c-a6cd-41d766dce6cc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shield Ability"",
                    ""type"": ""Button"",
                    ""id"": ""1f587c3c-27bb-40cf-aeca-3bbf4db756cc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Entangle Ability"",
                    ""type"": ""Button"",
                    ""id"": ""07e51a82-0ce3-476d-99ed-5ce56d481580"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""b04d2b14-e38c-45c0-b6a8-29aa42695b25"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Negative"",
                    ""id"": ""a4a0fbf6-39f6-477f-8149-f3fc0e46a588"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Positive"",
                    ""id"": ""df8eb9ad-d446-4b0d-8921-0a039f6eddeb"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""e9ff6c64-0792-4718-8256-736f26ce3bd5"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1e8230df-9149-4fd6-85fc-2bdcedaa209e"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": ""Press(behavior=1)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""afc45ab3-0310-4b2e-89f4-ea0c0a2049d5"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Change Weapons"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""4d540913-85ab-43b3-a107-33d66356c067"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Change Weapons"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""7b6c8802-45ba-4513-be89-1ead1215ee53"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Change Weapons"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""f70edf3c-6b8e-499c-b34a-eec2aace781e"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rage Ability"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bc10bcaa-caba-4ae3-9530-5ec3bba0e217"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Heal Ability"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""66992ca7-1a3f-4e7f-bb96-a1b683bb62fa"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shield Ability"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b3c25f29-46b4-4afc-9c04-d200038c572c"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Entangle Ability"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Dialogue"",
            ""id"": ""fbc9b266-7c61-48e6-b073-61822840e667"",
            ""actions"": [
                {
                    ""name"": ""Progress"",
                    ""type"": ""Button"",
                    ""id"": ""f8010363-e21c-4cfd-8ff2-f4599799426c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4664a67e-ddaa-49da-8eaa-fa5d71895446"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Progress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Combat
        m_Combat = asset.FindActionMap("Combat", throwIfNotFound: true);
        m_Combat_Movement = m_Combat.FindAction("Movement", throwIfNotFound: true);
        m_Combat_Pause = m_Combat.FindAction("Pause", throwIfNotFound: true);
        m_Combat_Attack = m_Combat.FindAction("Attack", throwIfNotFound: true);
        m_Combat_ChangeWeapons = m_Combat.FindAction("Change Weapons", throwIfNotFound: true);
        m_Combat_HealAbility = m_Combat.FindAction("Heal Ability", throwIfNotFound: true);
        m_Combat_RageAbility = m_Combat.FindAction("Rage Ability", throwIfNotFound: true);
        m_Combat_ShieldAbility = m_Combat.FindAction("Shield Ability", throwIfNotFound: true);
        m_Combat_EntangleAbility = m_Combat.FindAction("Entangle Ability", throwIfNotFound: true);
        // Dialogue
        m_Dialogue = asset.FindActionMap("Dialogue", throwIfNotFound: true);
        m_Dialogue_Progress = m_Dialogue.FindAction("Progress", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Combat
    private readonly InputActionMap m_Combat;
    private ICombatActions m_CombatActionsCallbackInterface;
    private readonly InputAction m_Combat_Movement;
    private readonly InputAction m_Combat_Pause;
    private readonly InputAction m_Combat_Attack;
    private readonly InputAction m_Combat_ChangeWeapons;
    private readonly InputAction m_Combat_HealAbility;
    private readonly InputAction m_Combat_RageAbility;
    private readonly InputAction m_Combat_ShieldAbility;
    private readonly InputAction m_Combat_EntangleAbility;
    public struct CombatActions
    {
        private @PlayerInputActions m_Wrapper;
        public CombatActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Combat_Movement;
        public InputAction @Pause => m_Wrapper.m_Combat_Pause;
        public InputAction @Attack => m_Wrapper.m_Combat_Attack;
        public InputAction @ChangeWeapons => m_Wrapper.m_Combat_ChangeWeapons;
        public InputAction @HealAbility => m_Wrapper.m_Combat_HealAbility;
        public InputAction @RageAbility => m_Wrapper.m_Combat_RageAbility;
        public InputAction @ShieldAbility => m_Wrapper.m_Combat_ShieldAbility;
        public InputAction @EntangleAbility => m_Wrapper.m_Combat_EntangleAbility;
        public InputActionMap Get() { return m_Wrapper.m_Combat; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CombatActions set) { return set.Get(); }
        public void SetCallbacks(ICombatActions instance)
        {
            if (m_Wrapper.m_CombatActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_CombatActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_CombatActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_CombatActionsCallbackInterface.OnMovement;
                @Pause.started -= m_Wrapper.m_CombatActionsCallbackInterface.OnPause;
                @Pause.performed -= m_Wrapper.m_CombatActionsCallbackInterface.OnPause;
                @Pause.canceled -= m_Wrapper.m_CombatActionsCallbackInterface.OnPause;
                @Attack.started -= m_Wrapper.m_CombatActionsCallbackInterface.OnAttack;
                @Attack.performed -= m_Wrapper.m_CombatActionsCallbackInterface.OnAttack;
                @Attack.canceled -= m_Wrapper.m_CombatActionsCallbackInterface.OnAttack;
                @ChangeWeapons.started -= m_Wrapper.m_CombatActionsCallbackInterface.OnChangeWeapons;
                @ChangeWeapons.performed -= m_Wrapper.m_CombatActionsCallbackInterface.OnChangeWeapons;
                @ChangeWeapons.canceled -= m_Wrapper.m_CombatActionsCallbackInterface.OnChangeWeapons;
                @HealAbility.started -= m_Wrapper.m_CombatActionsCallbackInterface.OnHealAbility;
                @HealAbility.performed -= m_Wrapper.m_CombatActionsCallbackInterface.OnHealAbility;
                @HealAbility.canceled -= m_Wrapper.m_CombatActionsCallbackInterface.OnHealAbility;
                @RageAbility.started -= m_Wrapper.m_CombatActionsCallbackInterface.OnRageAbility;
                @RageAbility.performed -= m_Wrapper.m_CombatActionsCallbackInterface.OnRageAbility;
                @RageAbility.canceled -= m_Wrapper.m_CombatActionsCallbackInterface.OnRageAbility;
                @ShieldAbility.started -= m_Wrapper.m_CombatActionsCallbackInterface.OnShieldAbility;
                @ShieldAbility.performed -= m_Wrapper.m_CombatActionsCallbackInterface.OnShieldAbility;
                @ShieldAbility.canceled -= m_Wrapper.m_CombatActionsCallbackInterface.OnShieldAbility;
                @EntangleAbility.started -= m_Wrapper.m_CombatActionsCallbackInterface.OnEntangleAbility;
                @EntangleAbility.performed -= m_Wrapper.m_CombatActionsCallbackInterface.OnEntangleAbility;
                @EntangleAbility.canceled -= m_Wrapper.m_CombatActionsCallbackInterface.OnEntangleAbility;
            }
            m_Wrapper.m_CombatActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Pause.started += instance.OnPause;
                @Pause.performed += instance.OnPause;
                @Pause.canceled += instance.OnPause;
                @Attack.started += instance.OnAttack;
                @Attack.performed += instance.OnAttack;
                @Attack.canceled += instance.OnAttack;
                @ChangeWeapons.started += instance.OnChangeWeapons;
                @ChangeWeapons.performed += instance.OnChangeWeapons;
                @ChangeWeapons.canceled += instance.OnChangeWeapons;
                @HealAbility.started += instance.OnHealAbility;
                @HealAbility.performed += instance.OnHealAbility;
                @HealAbility.canceled += instance.OnHealAbility;
                @RageAbility.started += instance.OnRageAbility;
                @RageAbility.performed += instance.OnRageAbility;
                @RageAbility.canceled += instance.OnRageAbility;
                @ShieldAbility.started += instance.OnShieldAbility;
                @ShieldAbility.performed += instance.OnShieldAbility;
                @ShieldAbility.canceled += instance.OnShieldAbility;
                @EntangleAbility.started += instance.OnEntangleAbility;
                @EntangleAbility.performed += instance.OnEntangleAbility;
                @EntangleAbility.canceled += instance.OnEntangleAbility;
            }
        }
    }
    public CombatActions @Combat => new CombatActions(this);

    // Dialogue
    private readonly InputActionMap m_Dialogue;
    private IDialogueActions m_DialogueActionsCallbackInterface;
    private readonly InputAction m_Dialogue_Progress;
    public struct DialogueActions
    {
        private @PlayerInputActions m_Wrapper;
        public DialogueActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Progress => m_Wrapper.m_Dialogue_Progress;
        public InputActionMap Get() { return m_Wrapper.m_Dialogue; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DialogueActions set) { return set.Get(); }
        public void SetCallbacks(IDialogueActions instance)
        {
            if (m_Wrapper.m_DialogueActionsCallbackInterface != null)
            {
                @Progress.started -= m_Wrapper.m_DialogueActionsCallbackInterface.OnProgress;
                @Progress.performed -= m_Wrapper.m_DialogueActionsCallbackInterface.OnProgress;
                @Progress.canceled -= m_Wrapper.m_DialogueActionsCallbackInterface.OnProgress;
            }
            m_Wrapper.m_DialogueActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Progress.started += instance.OnProgress;
                @Progress.performed += instance.OnProgress;
                @Progress.canceled += instance.OnProgress;
            }
        }
    }
    public DialogueActions @Dialogue => new DialogueActions(this);
    public interface ICombatActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
        void OnChangeWeapons(InputAction.CallbackContext context);
        void OnHealAbility(InputAction.CallbackContext context);
        void OnRageAbility(InputAction.CallbackContext context);
        void OnShieldAbility(InputAction.CallbackContext context);
        void OnEntangleAbility(InputAction.CallbackContext context);
    }
    public interface IDialogueActions
    {
        void OnProgress(InputAction.CallbackContext context);
    }
}
